name: Build APK - Environment Variables Fixed

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Extract Android Project
      run: |
        echo "üì¶ Extracting project..."
        unzip -q android_webview_project.zip
        echo "‚úÖ Extracted successfully"
        ls -la android_webview/
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: '34'
        build-tools-version: '34.0.0'
    
    - name: Check and Fix Gradle wrapper
      working-directory: ./android_webview
      run: |
        echo "üîç Checking Gradle wrapper files..."
        
        # Check what wrapper files exist
        ls -la gradlew* 2>/dev/null || echo "No gradlew files found initially"
        
        # Check if gradle wrapper directory exists
        if [ -d "gradle/wrapper" ]; then
          echo "üìÅ Found gradle/wrapper directory"
          ls -la gradle/wrapper/
        else
          echo "‚ö†Ô∏è  No gradle/wrapper directory found"
        fi
        
        # Set permissions only for existing files
        echo "üîß Setting permissions for existing Gradle wrapper..."
        if [ -f "gradlew" ]; then
          chmod +x gradlew
          echo "‚úÖ Set permissions on gradlew"
        fi
        
        echo "üìã Current wrapper status:"
        ls -la gradlew* 2>/dev/null || echo "Still no wrapper files"
    
    - name: Verify Gradle wrapper
      working-directory: ./android_webview
      run: |
        echo "üîß Testing Gradle wrapper basic functionality..."
        
        # First test without any environment variables
        echo "üß™ Testing ./gradlew --version without custom env..."
        ./gradlew --version || {
          echo "‚ö†Ô∏è  Basic Gradle test failed, trying alternative..."
          # Try with minimal environment
          export GRADLE_OPTS=""
          export JAVA_OPTS=""
          ./gradlew --version || {
            echo "‚ùå Gradle wrapper completely broken"
            exit 1
          }
        }
        
        echo "‚úÖ Gradle wrapper is functional"
    
    - name: Clean project thoroughly
      working-directory: ./android_webview
      run: |
        echo "üßπ Cleaning project directories..."
        
        # Remove all build artifacts
        if [ -d "app/build" ]; then
          rm -rf app/build/
          echo "‚úÖ Removed app/build/"
        fi
        
        if [ -d "build" ]; then
          rm -rf build/
          echo "‚úÖ Removed build/"
        fi
        
        if [ -d ".gradle" ]; then
          rm -rf .gradle/
          echo "‚úÖ Removed .gradle/"
        fi
        
        echo "üîÑ Clean completed"
    
    - name: Build APK - Simple Environment
      working-directory: ./android_webview
      run: |
        echo "üèóÔ∏è Starting APK build with clean environment..."
        echo "üìä Build configuration:"
        echo "  - Environment: Linux/Ubuntu"
        echo "  - Java: JDK 17"
        echo "  - Gradle: Wrapper (./gradlew)"
        echo "  - Build type: Debug"
        echo "  - Memory: Default (let Gradle handle it)"
        
        # Build APK WITHOUT custom environment variables to avoid conflicts
        ./gradlew assembleDebug \
          --no-daemon \
          --stacktrace \
          --continue
        
        BUILD_EXIT_CODE=$?
        
        if [ $BUILD_EXIT_CODE -eq 0 ]; then
          echo "‚úÖ APK build completed successfully!"
        else
          echo "‚ùå APK build failed with exit code: $BUILD_EXIT_CODE"
          echo "üîç Checking for partial build artifacts..."
          find app/build -name "*.apk" -type f 2>/dev/null || echo "No APK files found"
          exit $BUILD_EXIT_CODE
        fi
    
    - name: Verify APK exists
      run: |
        APK_PATH="android_webview/app/build/outputs/apk/debug/app-debug.apk"
        echo "üîç Verifying APK creation..."
        
        if [ -f "$APK_PATH" ]; then
          echo "‚úÖ SUCCESS: APK created successfully!"
          echo "üì± APK Details:"
          ls -lh "$APK_PATH"
          file "$APK_PATH"
          echo "üìè APK Size: $(du -h "$APK_PATH" | cut -f1)"
        else
          echo "‚ùå ERROR: APK not found at expected location"
          echo "üîç Searching for any APK files..."
          find android_webview -name "*.apk" -type f
          echo "üîç Checking build directory structure:"
          find android_webview/app/build -type f | head -10
          exit 1
        fi
    
    - name: Upload APK (v4)
      uses: actions/upload-artifact@v4
      with:
        name: webview-apk-debug-fixed
        path: android_webview/app/build/outputs/apk/debug/app-debug.apk
        retention-days: 30
    
    - name: Upload project source
      uses: actions/upload-artifact@v4
      with:
        name: project-source-fixed
        path: android_webview/
        retention-days: 30
    
    - name: Upload build logs
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-fixed
        path: |
          android_webview/app/build/
          android_webview/.gradle/
        retention-days: 7
